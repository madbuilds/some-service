name: assign to Board

on:
  issues:
    types:
      - opened
  pull_request:
    types:
      - opened

env:
  SYNC_APP_ID:        ${{ secrets.MADBUILDS_SYNCAPP_APP_ID }}
  SYNC_CLIENT_ID:     ${{ secrets.MADBUILDS_SYNCAPP_CLIENT_ID }}
  SYNC_CLIENT_SECRET: ${{ secrets.MADBUILDS_SYNCAPP_CLIENT_SECRET }}
  SYNC_PRIVATE_KEY:   ${{ secrets.MADBUILDS_SYNCAPP_PRIVATE_KEY }}

  PROJECT_OWNER: madbuilds
  PROJECT_ID:    7

jobs:
  board-update:
    permissions:
      issues: read
      pull-requests: read
      repository-projects: write

    name: add to board
    runs-on: ubuntu-latest
    steps:
      - name: Auth # https://github.com/tibdex/github-app-token
        id: auth
        uses: tibdex/github-app-token@v2
        with:
          app_id:      ${{ env.SYNC_APP_ID }}
          private_key: ${{ env.SYNC_PRIVATE_KEY }}

      - uses: actions/add-to-project@v1.0.2
        with:
          project-url: https://github.com/orgs/${{ env.PROJECT_OWNER }}/projects/${{ env.PROJECT_ID }}
          github-token: ${{ steps.auth.outputs.token }}

      - uses: actions/github-script@v7
        with:
          github-token: ${{ steps.auth.outputs.token }}
          script: |
            const title = context.payload.issue.title;
            const issueId = context.payload.issue.node_id;
            const projectNumber = ${{ env.PROJECT_ID }};
            const org = '${{ env.PROJECT_OWNER }}';
            
            // Step 1: Get project ID
            const { organization } = await github.graphql(`
              query($org: String!, $number: Int!) {
                organization(login: $org) {
                  projectV2(number: $number) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { org, number: projectNumber });
            
            const project = organization.projectV2;
            const typeField = project.fields.nodes.find(f => f.name === "Type");
            
            if (!typeField) {
              core.setFailed("Could not find 'Type' field.");
              return;
            }
            
            // Step 2: Match title prefix to Option ID
            let optionName = null;
            if (title.includes('[REQUEST]')) optionName = 'Request';
            else if (title.includes('[FEATURE]')) optionName = 'Feature';
            else if (title.includes('[TASK]')) optionName = 'Task';
            else if (title.includes('[BUG]')) optionName = 'Bug';
            
            const option = typeField.options.find(opt =>
              opt.name.toLowerCase().includes(optionName.toLowerCase())
            );
            if (!option) {
              console.log(`No matching Type for title prefix: ${title}`);
              return;
            }
            
            // Step 3: Update the field
            await github.graphql(`
              mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                updateProjectV2ItemFieldValue(input: $input) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, {
              input: {
                projectId: project.id,
                itemId: issueId,
                fieldId: typeField.id,
                value: { singleSelectOptionId: option.id }
              }
            });
            
            console.log(`Set Type to ${optionName}`);
